{"version":3,"sources":["constants/cardCompany.js","constants/errorMessage.js","constants/card.js","components/CardCompanySelection/index.js","assets/securityGuideImage.svg","components/SecurityCodeGuide/index.js","components/Buttons/TextButton/index.js","components/Card/index.js","components/Icon/assets/Dot.js","components/CardCompanyOption/index.js","components/FormInputs/Input/index.js","components/FormInputs/PasswordInput/index.js","components/Icon/index.js","components/Icon/assets/LeftArrow.js","components/Icon/assets/QuestionMark.js","components/Modal/index.js","components/Header/index.js","utils/formatter.js","pages/AddCardForm/validator.js","pages/AddCardForm/index.js","pages/AddCardComplete/index.js","App.js","index.js"],"names":["CARD_COMPANY","POCO","NAME","COLOR","JUN","GONGWON","BRAN","ROID","DOBY","COLIN","SSUN","ERROR_MESSAGE","INVALID_DATE_FORMAT","INVALID_USER_NAME","CARD","NICKNAME_MAX_LENGTH","SECURITY_CODE_LENGTH","SERIAL_NUMBER_LENGTH","SERIAL_ID_CODE_LENGTH","SERIAL_NUMBER_UNIT_LENGTH","EXPIRATION_DATE_LENGTH","USER_NAME_MAX_LENGTH","CardCompanySelection","onSetCardCompany","className","Object","entries","map","key","CardCompanyOption","cardCompanyKey","name","color","onClick","event","currentTarget","dataset","SecurityCodeGuide","src","securityGuideImage","alt","width","TextButton","text","props","Card","cardCompanyName","cardColor","cardNumber","userName","expirationDate","size","style","backgroundColor","viewBox","d","Array","from","length","_","index","charAt","join","Dot","xmlns","height","fill","id","cx","cy","r","type","data-card-company-key","Input","fontColor","label","textAlign","letterCounter","innerRef","ariaLabelledby","errorMessage","inputStyle","children","current","max","ref","aria-labelledby","PasswordInput","password","onSetPassword","value","maxLength","inputMode","onChange","target","margin","Icon","LeftArrow","QuestionMark","Modal","onCloseModal","role","aria-modal","Header","title","cardSerialNumberFormatter","serialNumber","Error","maskedSerialNumber","slice","repeat","match","MMYYDateFormatter","date","isValidDateFormat","test","AddCardForm","setSerialNumber","cardCompany","setCardCompany","setExpirationDate","setUserName","securityCode","setSecurityCode","setPassword","onSetModalContents","setPage","useState","expirationDateErrorMessage","setExpirationDateErrorMessage","userNameErrorMessage","setUserNameErrorMessage","serialNumberInputElement","useRef","isFormCompleted","useMemo","isValidSerialNumber","first","second","useEffect","focus","offsetByInputType","deleteContentBackward","insertText","getCurrentSerialNumber","serialIndex","insertKey","onSubmit","preventDefault","inputKey","nativeEvent","data","inputValue","replaceAll","isNaN","inputType","selectionStart","currentLocation","getOffset","Math","floor","currentSerialNumber","setSelectionRange","blur","onFocus","placeholder","replace","isValidUserName","toUpperCase","AddCardComplete","cardNickName","setCardNickName","App","page","isModalOpened","setIsModalOpened","modalContents","setModalContents","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gYAWeA,EAXM,CACnBC,KAAM,CAAEC,KAAM,2BAAQC,MAAO,WAC7BC,IAAK,CAAEF,KAAM,qBAAOC,MAAO,WAC3BE,QAAS,CAAEH,KAAM,2BAAQC,MAAO,WAChCG,KAAM,CAAEJ,KAAM,2BAAQC,MAAO,WAC7BI,KAAM,CAAEL,KAAM,iCAASC,MAAO,WAC9BK,KAAM,CAAEN,KAAM,2BAAQC,MAAO,WAC7BM,MAAO,CAAEP,KAAM,2BAAQC,MAAO,WAC9BO,KAAM,CAAER,KAAM,qBAAOC,MAAO,YCHfQ,EALO,CACpBC,oBAAqB,qFACrBC,kBAAmB,gHCQNC,EAVF,CACXC,oBAAqB,GACrBC,qBAAsB,EACtBC,qBAAsB,GACtBC,sBAAuB,EACvBC,0BAA2B,EAC3BC,uBAAwB,EACxBC,qBAAsB,I,eCFT,SAASC,EAAT,GAAqD,IAArBC,EAAoB,EAApBA,iBAC7C,OACE,qBAAKC,UAAU,yBAAf,SACGC,OAAOC,QAAQ1B,GAAc2B,KAAI,mCAAEC,EAAF,YAAS1B,EAAT,EAASA,KAAMC,EAAf,EAAeA,MAAf,OAChC,cAAC0B,EAAD,CAEEC,eAAgBF,EAChBG,KAAM7B,EACN8B,MAAO7B,EACP8B,QAAS,SAACC,GACRX,EAAiBW,EAAMC,cAAcC,QAAQN,kBAL1CF,QCVA,UAA0B,+CCG1B,SAASS,IACtB,OAAO,qBAAKC,IAAKC,EAAoBC,IAAI,qBAAqBC,MAAM,U,wBCDvD,SAASC,EAAT,GAAyC,IAAnBC,EAAkB,EAAlBA,KAASC,EAAS,wBACrD,OACE,gDAAQpB,UAAU,eAAkBoB,GAApC,aACGD,K,MCDQ,SAASE,EAAT,GAQX,IAPFC,EAOC,EAPDA,gBACAC,EAMC,EANDA,UACAC,EAKC,EALDA,WACAC,EAIC,EAJDA,SACAC,EAGC,EAHDA,eACAC,EAEC,EAFDA,KACAC,EACC,EADDA,MAEA,OACE,sBACE5B,UAAS,eAAU2B,GAAQ,UAC3BC,MAAK,2BAAOA,GAAP,IAAcC,gBAAiBN,GAAa,YAFnD,UAIE,qBAAKvB,UAAU,qBAAf,SAAqCsB,IACrC,qBAAKtB,UAAU,aAAf,SACE,qBAAK8B,QAAQ,YAAb,SACE,sBACE9B,UAAU,kBACV+B,EAAE,kHAIR,qBAAK/B,UAAU,8BAAf,SACGgC,MAAMC,KAAK,CAAEC,OAAQ5C,EAAKG,uBAAwBU,KAAI,SAACgC,EAAGC,GACzD,OAAIA,EAAQ9C,EAAKI,sBAEb,qBAAiBM,UAAU,oBAA3B,SACGwB,EAAWa,OAAOD,IADXA,GAOZ,qBAEEpC,UAAW,CACT,oBACA,MACAwB,EAAWa,OAAOD,GAAS,GAAK,UAChCE,KAAK,MALFF,QAUb,sBAAKpC,UAAU,8BAAf,UACE,qBAAKA,UAAU,kBAAf,SAAkCyB,GAAY,SAC9C,qBAAKzB,UAAU,wBAAf,SAAwC0B,GAAkB,gBClDnD,SAASa,EAAT,GAA2D,IAAD,IAA3CZ,YAA2C,MAApC,OAAoC,MAA5BnB,aAA4B,MAApB,UAAoB,EAAToB,EAAS,EAATA,MAC9D,OACE,sBACEY,MAAM,6BACNV,QAAQ,YACRb,MAAOU,EACPc,OAAQd,EACRe,KAAMlC,EACNoB,MAAOA,EANT,UAQE,6CACA,mBAAGe,GAAG,MAAN,SACE,wBAAQC,GAAG,IAAIC,GAAG,IAAIC,EAAE,W,MCVjB,SAASzC,EAAT,GAAuE,IAA1CC,EAAyC,EAAzCA,eAAgBC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,MAAUY,EAAS,iDACnF,OACE,iDACE2B,KAAK,SACL/C,UAAU,sBACVgD,wBAAuB1C,GACnBc,GAJN,cAME,cAACmB,EAAD,CAAKvC,UAAU,8BAA8B2B,KAAK,OAAOnB,MAAOA,IAChE,mBAAGR,UAAU,6BAAb,SAA2CO,Q,MCVlC,SAAS0C,EAAT,GAYZ,EAXDhC,MAWC,EAVDiC,UAUE,IATFC,EASC,EATDA,MACAC,EAQC,EARDA,UACAC,EAOC,EAPDA,cACAC,EAMC,EANDA,SACAC,EAKC,EALDA,eACAC,EAIC,EAJDA,aACAC,EAGC,EAHDA,WACAC,EAEC,EAFDA,SACGtC,EACF,4IACD,OACE,sBAAKpB,UAAU,cAAf,WACImD,GAASE,IACT,sBAAKrD,UAAU,qBAAf,UACGmD,GAAS,uBAAOnD,UAAU,aAAjB,SAA+BmD,IACxCE,GACC,sBAAMrD,UAAU,iBAAhB,mBAAqCqD,EAAcM,QAAnD,YAA8DN,EAAcO,UAIlF,sBAAK5D,UAAW,CAAC,SAAU,gBAAgBsC,KAAK,KAAhD,UACE,mCACEtC,UAAW,CAAC,qBAEVwD,EAAe,QAAU,GACzBJ,EAAS,eAAWA,GAAc,IAClCd,KAAK,KACPV,MAAO6B,EACPI,IAAKP,EACLQ,kBAAiBP,GACbnC,IAELsC,KAEFF,GAAgB,qBAAKxD,UAAU,6BAAf,SAA6CwD,O,MClCrD,SAASO,EAAT,GAAqD,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,cAChD,OACE,sBAAKjE,UAAU,4BAAf,UACE,uBAAOA,UAAU,wBAAwB2C,GAAG,gBAA5C,mDAGA,sBAAK3C,UAAU,0BAAf,UACGC,OAAOC,QAAQ8D,GAAU7D,KAAI,YAAmB,IAAD,mBAAhBC,EAAgB,KAAX8D,EAAW,KAC9C,OACE,cAACjB,EAAD,CACEF,KAAK,WACLU,WAAY,CAAExC,MAAO,UACrBkD,UAAU,IACVC,UAAU,UAEVF,MAAOA,EACPG,SAAU,SAAC3D,GACTuD,EAAc7D,EAAKM,EAAM4D,OAAOJ,QAElCd,UAAU,SACVG,eAAe,iBANVnD,MAUX,cAAC,EAAKmC,IAAN,CAAUZ,KAAK,MAAMnB,MAAM,UAAUoB,MAAO,CAAE2C,OAAQ,UACtD,cAAC,EAAKhC,IAAN,CAAUZ,KAAK,MAAMnB,MAAM,UAAUoB,MAAO,CAAE2C,OAAQ,gBC7B9D,IAEeC,EAFF,CAAEjC,MAAKkC,UCAL,YAAiE,IAAD,IAA3C9C,YAA2C,MAApC,OAAoC,MAA5BnB,aAA4B,MAApB,UAAoB,EAAToB,EAAS,EAATA,MACpE,OACE,sBACEY,MAAM,6BACNV,QAAQ,eACRb,MAAOU,EACPc,OAAQd,EACRe,KAAMlC,EACNoB,MAAOA,EANT,UAQE,mDACA,mBAAGe,GAAG,YAAN,SACE,sBACEZ,EAAE,8LDbmB2C,aEAhB,YAAoE,IAAD,IAA3C/C,YAA2C,MAApC,OAAoC,MAA5BnB,aAA4B,MAApB,UAAoB,EAAToB,EAAS,EAATA,MACvE,OACE,sBACEY,MAAM,6BACNV,QAAQ,YACRb,MAAOU,EACPc,OAAQd,EACRe,KAAMlC,EACNoB,MAAOA,EANT,UAQE,uDACA,oBAAGe,GAAG,eAAN,UACE,sBAAMZ,EAAE,mFACR,sBAAMA,EAAE,yhB,MCZD,SAAS4C,EAAT,GAA4C,IAA3BC,EAA0B,EAA1BA,aAAclB,EAAY,EAAZA,SAO5C,OACE,qBAAK1D,UAAU,QAAQ6E,KAAK,SAASC,aAAW,OAAOrE,QAPnC,SAACC,GACjBA,EAAMC,gBAAkBD,EAAM4D,QAChCM,KAKF,SACE,qBAAK5E,UAAU,cAAf,SAA8B0D,M,MCRrB,SAASqB,EAAT,GAA4B,IAAVC,EAAS,EAATA,MAC/B,OACE,sBAAKhF,UAAU,SAAf,UACE,cAAC,EAAKyE,UAAN,CAAgB9C,KAAK,OAAOnB,MAAM,YAClC,oBAAIR,UAAU,gBAAd,SAA+BgF,O,WCRxBC,EAA4B,SAACC,GAAkB,IAAD,EACzD,GAAIA,EAAahD,OAAS,GAAI,MAAMiD,MAAM,sFAE1C,IAAMC,EACJF,EAAaG,MAAM,EAAG,GAAK,SAAIC,OAAOJ,EAAahD,OAAS,EAAIgD,EAAahD,OAAS,EAAI,GAC5F,OAAO,UAAAkD,EAAmBG,MAAM,kBAAzB,eAAqCjD,KAAK,OAAQ8C,GAG9CI,EAAoB,SAACC,GAAU,IAAD,EACzC,GAAIA,EAAKvD,OAAS,EAAG,MAAMiD,MAAM,sFAEjC,OAAO,UAAAM,EAAKF,MAAM,kBAAX,eAAuBjD,KAAK,OAAQmD,GCHhCC,EAAoB,SAACD,GAChC,MAAO,6BAA6BE,KAAKF,I,MCF5B,SAASG,EAAT,GAeX,IAAD,IAdDV,EAcC,EAdDA,aACAW,EAaC,EAbDA,gBACAC,EAYC,EAZDA,YACAC,EAWC,EAXDA,eACArE,EAUC,EAVDA,eACAsE,EASC,EATDA,kBACAvE,EAQC,EARDA,SACAwE,EAOC,EAPDA,YACAC,EAMC,EANDA,aACAC,EAKC,EALDA,gBACAnC,EAIC,EAJDA,SACAoC,EAGC,EAHDA,YACAC,EAEC,EAFDA,mBACAC,EACC,EADDA,QACC,EACmEC,mBAAS,IAD5E,mBACMC,EADN,KACkCC,EADlC,OAEuDF,mBAAS,IAFhE,mBAEMG,EAFN,KAE4BC,EAF5B,KAIKC,EAA2BC,iBAAO,MAElCC,EAAkBC,mBAAQ,WAC9B,ODzB+B,SAAC7B,GAClC,MAAO,gBAAgBS,KAAKT,GCyBxB8B,CAAoB9B,IACpBY,GACAJ,EAAkBhE,IAClBwE,EAAahE,SAAW5C,EAAKE,sBAC7BwE,EAASiD,OACTjD,EAASkD,SAEV,CAAChC,EAAcY,EAAapE,EAAgBwE,EAAclC,IAE7DmD,qBAAU,WACRP,EAAyBjD,QAAQyD,UAChC,CAACtB,IAEJ,IAMMuB,EAAoB,CACxBC,uBAAwB,EACxBC,WAAY,GAoBRC,EAAyB,CAC7BF,sBAAuB,SAACG,GACtB,OAAOvC,EAAaG,MAAM,EAAGoC,EAAc,GAAKvC,EAAaG,MAAMoC,IAErEF,WAAY,SAACE,EAAaC,GACxB,OAAOxC,EAAaG,MAAM,EAAGoC,GAAeC,EAAYxC,EAAaG,MAAMoC,KAsC/E,OACE,sBAAKzH,UAAU,2BAAf,UACE,cAAC+E,EAAD,CAAQC,MAAM,6BACd,uBACEhF,UAAU,gBACV2H,SAAU,SAACjH,GACTA,EAAMkH,iBAEDd,GAELR,EAAQ,oBAPZ,UAUE,qBAAKtG,UAAU,eAAf,SACE,cAACqB,EAAD,CACEI,SAAUA,EACVH,gBAAe,UAAE9C,EAAasH,UAAf,aAAE,EAA2BpH,KAC5C6C,UAAS,UAAE/C,EAAasH,UAAf,aAAE,EAA2BnH,MACtC6C,WAAY0D,EACZxD,eAAgB8D,EAAkB9D,OAItC,cAACuB,EAAD,CACEF,KAAK,MACLI,MAAM,2BACNM,WAAY,CAAExC,MAAO,QACrBkD,UAAU,KACVE,SA9D0B,SAAC3D,GACjC,IAAMmH,EAAWnH,EAAMoH,YAAYC,KAC7BC,EAAatH,EAAM4D,OAAOJ,MAAM+D,WAAW,IAAK,IAEtD,GAAIC,MAAML,GACRnH,EAAM4D,OAAOJ,MAAQe,EAA0BC,OADjD,CAKA,IAAMiD,EAAYzH,EAAMoH,YAAYK,UAC9BC,EAAiB1H,EAAM4D,OAAO8D,eAE9BC,EAAkBD,EAtCR,SAACD,EAAWC,GAC5B,MAAkB,eAAdD,EACwB,IAAnBC,GAAwBA,GAAkB9I,EAAKK,0BAA4B,KAAO,EACrF0H,EAAkBc,GAClB,EAGY,0BAAdA,GACwB,IAAnBC,IACJA,EAAiB,IAAM9I,EAAKK,0BAA4B,KAAO,EAC9D0H,EAAkBc,GAIjB,EAuBQG,CAAUH,EAAWC,GAG9BX,EACJY,EACAE,KAAKC,MAAMH,GAAmB/I,EAAKK,0BAA4B,IAC/D0H,EAAkBc,GACdM,EAAsBjB,EAAuBW,GAAWV,EAAaI,GAE3EhC,EAAgB4C,GAChB/H,EAAM4D,OAAOJ,MAAQe,EAA0BwD,GAC/C/H,EAAM4D,OAAOoE,kBAAkBL,EAAiBA,GAE5CL,EAAW9F,SAAW5C,EAAKI,wBAC7BkH,EAAyBjD,QAAQgF,OACjCtC,EAAmB,kBAGjBP,GAAekC,EAAW9F,OAAS5C,EAAKI,uBAC1CqG,EAAe,MAiCX6C,QAAS,WACF9C,GAAeZ,EAAahD,SAAW5C,EAAKI,wBAC/CkH,EAAyBjD,QAAQgF,OACjCtC,EAAmB,mBAGvB/C,SAAUsD,EACVxC,UAAU,UACVhB,UAAU,WAGZ,cAACH,EAAD,CACEF,KAAK,OACLI,MAAM,qBACNM,WAAY,CAAExC,MAAO,QACrB4H,YAAY,QACZzF,UAAU,SACVe,UAAU,IACVD,MAAOsB,EAAkB9D,GACzB2C,SAAU,SAAC3D,GACT,IAAMgB,EAAiBhB,EAAM4D,OAAOJ,MAAM4E,QAAQ,IAAK,IAEvD,IAAIZ,MAAMxG,KAEVsE,EAAkBtE,GAEdA,EAAeQ,SAAW5C,EAAKM,wBAAwB,CACzD,GAAI8F,EAAkBhE,GAEpB,YADA+E,EAA8B,IAIhCA,EAA8BtH,EAAcC,uBAGhDqB,QAAS,WACPuF,EAAkB,IAClBQ,GAA8BC,EAA8B,KAE9DjD,aAAcgD,IAGhB,cAACvD,EAAD,CACEF,KAAK,OACLU,WAAY,CAAExC,MAAO,QACrBkC,MAAM,6DACN0F,YAAY,oHACZxF,cAAe,CAAEM,QAASlC,EAASS,OAAQ0B,IAAKtE,EAAKO,sBACrDsE,UAAW7E,EAAKO,qBAChBqE,MAAOzC,EACP4C,SAAU,SAAC3D,IDrLU,SAACe,GAC9B,MAAO,sBAAsBkE,KAAKlE,GCuLnBsH,CAFQrI,EAAM4D,OAAOJ,OAGxByC,EAAwBxH,EAAcE,oBAIxC4G,EAAYvF,EAAM4D,OAAOJ,MAAM8E,eAC/BrC,EAAwB,MAE1BnD,aAAckD,IAGhB,cAACzD,EAAD,CACEF,KAAK,WACLU,WAAY,CAAExC,MAAO,QACrBkC,MAAM,oCACNgB,UAAU,IACVC,UAAU,UACVF,MAAOgC,EACP7B,SAAU,SAAC3D,GACT,IAAMsH,EAAatH,EAAM4D,OAAOJ,MAE5BgE,MAAMF,IAEV7B,EAAgB6B,IAElB5E,UAAU,SAdZ,SAgBE,wBACEL,KAAK,SACL/C,UAAU,6BACVS,QAAS,WACP4F,EAAmB,iBAJvB,SAOE,cAAC,EAAK3B,aAAN,CAAmB/C,KAAK,aAI5B,cAACoC,EAAD,CAAeC,SAAUA,EAAUC,cA/LnB,SAAC7D,EAAK8D,GACtBgE,MAAMhE,IAEVkC,EAAY,2BAAKpC,GAAN,kBAAiB5D,EAAM8D,QA6L7B4C,GACC,qBAAK9G,UAAU,sBAAf,SACE,cAACkB,EAAD,CAAYC,KAAK,yB,MCtOd,SAAS8H,EAAT,GAQX,IAPFxH,EAOC,EAPDA,SACAqE,EAMC,EANDA,YACAZ,EAKC,EALDA,aACAxD,EAIC,EAJDA,eACAwH,EAGC,EAHDA,aACAC,EAEC,EAFDA,gBACA7C,EACC,EADDA,QAEA,OACE,sBAAKtG,UAAW,+BAAhB,UACE,oBAAIA,UAAU,2BAAd,yFACA,cAACqB,EAAD,CACEI,SAAUA,EACVH,gBAAiB9C,EAAasH,GAAapH,KAC3C6C,UAAW/C,EAAasH,GAAanH,MACrC6C,WAAY0D,EACZxD,eAAgB8D,EAAkB9D,GAClCC,KAAK,UAEP,uBACE3B,UAAU,2BACVkE,MAAOgF,EACP7E,SAAU,SAAC3D,GACTyI,EAAgBzI,EAAM4D,OAAOJ,QAE/BC,UAAW7E,EAAKC,sBAElB,qBACES,UAAU,sBACVS,QAAS,SAACC,GACRA,EAAMkH,kBAHV,SAME,cAAC1G,EAAD,CACEC,KAAK,eACLV,QAAS,WACP6F,EAAQ,uBC2CL8C,MAjFf,WAAgB,IAAD,EACW7C,mBAAS,eADpB,mBACN8C,EADM,KACA/C,EADA,OAG6BC,oBAAS,GAHtC,mBAGN+C,EAHM,KAGSC,EAHT,OAI6BhD,mBAAS,iBAJtC,mBAINiD,EAJM,KAISC,EAJT,OAM2BlD,mBAAS,IANpC,mBAMNrB,EANM,KAMQW,EANR,OAOyBU,mBAAS,IAPlC,mBAONT,EAPM,KAOOC,EAPP,OAQ+BQ,mBAAS,IARxC,mBAQN7E,EARM,KAQUsE,EARV,OASmBO,mBAAS,IAT5B,mBASN9E,EATM,KASIwE,EATJ,OAU2BM,mBAAS,IAVpC,mBAUNL,EAVM,KAUQC,EAVR,OAWmBI,mBAAS,CAAEU,MAAO,GAAIC,OAAQ,KAXjD,mBAWNlD,EAXM,KAWIoC,EAXJ,OAY2BG,mBAAS,IAZpC,mBAYN2C,EAZM,KAYQC,EAZR,KAsCb,OAXAhC,qBAAU,WACK,gBAATkC,IACFxD,EAAgB,IAChBE,EAAe,IACfC,EAAkB,IAClBC,EAAY,IACZE,EAAgB,IAChBC,EAAY,CAAEa,MAAO,GAAIC,OAAQ,QAElC,CAACmC,IAGF,qCACY,gBAATA,GACC,cAACzD,EAAD,CACEV,aAAcA,EACdW,gBAAiBA,EACjBC,YAAaA,EACbC,eAAgBA,EAChBrE,eAAgBA,EAChBsE,kBAAmBA,EACnBvE,SAAUA,EACVwE,YAAaA,EACbC,aAAcA,EACdC,gBAAiBA,EACjBnC,SAAUA,EACVoC,YAAaA,EACbC,mBAxCmB,SAAC9F,GAC1BkJ,EAAiBlJ,GAEjBgJ,GAAiB,IAsCXjD,QAASA,IAGH,oBAAT+C,GACC,cAACJ,EAAD,CACE/D,aAAcA,EACdY,YAAaA,EACbpE,eAAgBA,EAChBD,SAAUA,EACVyH,aAAcA,EACdC,gBAAiBA,EACjB7C,QAASA,IAGZgD,GACC,eAAC3E,EAAD,CAAOC,aAAc,kBAAM2E,GAAiB,IAA5C,UACqB,kBAAlBC,GACC,cAAC1J,EAAD,CAAsBC,iBApDP,SAACQ,GACxBwF,EAAexF,GACf4I,EAAgB3K,EAAa+B,GAAM7B,MAEnC6K,GAAiB,MAkDQ,iBAAlBC,GAAoC,cAAC3I,EAAD,WC3E/C6I,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.97c6b5aa.chunk.js","sourcesContent":["const CARD_COMPANY = {\n  POCO: { NAME: '포코카드', COLOR: '#E24141' },\n  JUN: { NAME: '준카드', COLOR: '#547CE4' },\n  GONGWON: { NAME: '공원카드', COLOR: '#73BC6D' },\n  BRAN: { NAME: '브랜카드', COLOR: '#DE59B9' },\n  ROID: { NAME: '로이드카드', COLOR: '#04C09E' },\n  DOBY: { NAME: '도비카드', COLOR: '#E76E9A' },\n  COLIN: { NAME: '콜린카드', COLOR: '#F37D3B' },\n  SSUN: { NAME: '썬카드', COLOR: '#FBCD58' },\n};\n\nexport default CARD_COMPANY;\n","const ERROR_MESSAGE = {\n  INVALID_DATE_FORMAT: '유효하지 않은 날짜 형식입니다.',\n  INVALID_USER_NAME: '이름은 영문 및 공백만 입력이 가능합니다.',\n};\n\nexport default ERROR_MESSAGE;\n","const CARD = {\n  NICKNAME_MAX_LENGTH: 10,\n  SECURITY_CODE_LENGTH: 3,\n  SERIAL_NUMBER_LENGTH: 16,\n  SERIAL_ID_CODE_LENGTH: 8,\n  SERIAL_NUMBER_UNIT_LENGTH: 4,\n  EXPIRATION_DATE_LENGTH: 4,\n  USER_NAME_MAX_LENGTH: 30,\n};\n\nexport default CARD;\n","import React from 'react';\nimport { CardCompanyOption } from '../';\nimport { CARD_COMPANY } from '../../constants';\nimport './style.css';\n\nexport default function CardCompanySelection({ onSetCardCompany }) {\n  return (\n    <div className=\"card-company-selection\">\n      {Object.entries(CARD_COMPANY).map(([key, { NAME, COLOR }]) => (\n        <CardCompanyOption\n          key={key}\n          cardCompanyKey={key}\n          name={NAME}\n          color={COLOR}\n          onClick={(event) => {\n            onSetCardCompany(event.currentTarget.dataset.cardCompanyKey);\n          }}\n        />\n      ))}\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/securityGuideImage.688d548b.svg\";","import React from 'react';\nimport securityGuideImage from '../../assets/securityGuideImage.svg';\n\nexport default function SecurityCodeGuide() {\n  return <img src={securityGuideImage} alt=\"securityGuideImage\" width=\"280px\"></img>;\n}\n","import React from 'react';\nimport './style.css';\n\nexport default function TextButton({ text, ...props }) {\n  return (\n    <button className=\"text-button\" {...props}>\n      {text}\n    </button>\n  );\n}\n","import React from 'react';\nimport './style.css';\nimport '../../index.css';\nimport { CARD } from '../../constants';\n\nexport default function Card({\n  cardCompanyName,\n  cardColor,\n  cardNumber,\n  userName,\n  expirationDate,\n  size,\n  style,\n}) {\n  return (\n    <div\n      className={`card-${size || 'normal'}`}\n      style={{ ...style, backgroundColor: cardColor || '#d2d2d2' }}\n    >\n      <div className=\"card__company-name\">{cardCompanyName}</div>\n      <div className=\"card__chip\">\n        <svg viewBox=\"0 0 60 39\">\n          <path\n            className=\"card__chip-line\"\n            d=\"M 0, 13 L 30, 13 M 0, 26 L 30, 26 M 30, 13 L 30, 26  M 30, 20 L 60, 20 M 30, 13 L 60, 0 M 30, 26 L 60, 39\"\n          />\n        </svg>\n      </div>\n      <div className=\"card__card-number-container\">\n        {Array.from({ length: CARD.SERIAL_NUMBER_LENGTH }).map((_, index) => {\n          if (index < CARD.SERIAL_ID_CODE_LENGTH) {\n            return (\n              <div key={index} className=\"card__card-number\">\n                {cardNumber.charAt(index)}\n              </div>\n            );\n          }\n\n          return (\n            <div\n              key={index}\n              className={[\n                'card__card-number',\n                'dot',\n                cardNumber.charAt(index) ? '' : 'hidden',\n              ].join(' ')}\n            ></div>\n          );\n        })}\n      </div>\n      <div className=\"card__card-detail-container\">\n        <div className=\"card__user-name\">{userName || 'NAME'}</div>\n        <div className=\"card__expiration-date\">{expirationDate || 'MM/YY'}</div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Dot({ size = '16px', color = '#616161', style }) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 16 16\"\n      width={size}\n      height={size}\n      fill={color}\n      style={style}\n    >\n      <title>Icon/dot</title>\n      <g id=\"dot\">\n        <circle cx=\"8\" cy=\"8\" r=\"8\" />\n      </g>\n    </svg>\n  );\n}\n","import React from 'react';\nimport { Dot } from '../Icon/assets';\nimport './style.css';\n\nexport default function CardCompanyOption({ cardCompanyKey, name, color, ...props }) {\n  return (\n    <button\n      type=\"button\"\n      className=\"card-company-option\"\n      data-card-company-key={cardCompanyKey}\n      {...props}\n    >\n      <Dot className=\"card-company-option__button\" size=\"36px\" color={color} />\n      <p className=\"card-company-option__label\">{name}</p>\n    </button>\n  );\n}\n","import React from 'react';\nimport './style.css';\n\nexport default function Input({\n  width,\n  fontColor,\n  label,\n  textAlign,\n  letterCounter,\n  innerRef,\n  ariaLabelledby,\n  errorMessage,\n  inputStyle,\n  children,\n  ...props\n}) {\n  return (\n    <div className=\"basic-input\">\n      {(label || letterCounter) && (\n        <div className=\"basic-input__label\">\n          {label && <label className=\"label-text\">{label}</label>}\n          {letterCounter && (\n            <span className=\"letter-counter\">{`${letterCounter.current}/${letterCounter.max}`}</span>\n          )}\n        </div>\n      )}\n      <div className={['d-flex', 'items-center'].join(' ')}>\n        <input\n          className={[\n            `basic-input__input`,\n            errorMessage ? 'error' : '',\n            textAlign ? `text-${textAlign}` : '',\n          ].join(' ')}\n          style={inputStyle}\n          ref={innerRef}\n          aria-labelledby={ariaLabelledby}\n          {...props}\n        />\n        {children}\n      </div>\n      {errorMessage && <div className=\"basic-input__error-message\">{errorMessage}</div>}\n    </div>\n  );\n}\n","import React from 'react';\nimport { Input } from '../';\nimport { Icon } from '../../';\nimport '../../../index.css';\nimport './style.css';\n\nexport default function PasswordInput({ password, onSetPassword }) {\n  return (\n    <div className=\"password-input__container\">\n      <label className=\"password-input__title\" id=\"card-password\">\n        카드 비밀번호\n      </label>\n      <div className=\"password-input__content\">\n        {Object.entries(password).map(([key, value]) => {\n          return (\n            <Input\n              type=\"password\"\n              inputStyle={{ width: '2.5rem' }}\n              maxLength=\"1\"\n              inputMode=\"numeric\"\n              key={key}\n              value={value}\n              onChange={(event) => {\n                onSetPassword(key, event.target.value);\n              }}\n              textAlign=\"center\"\n              ariaLabelledby=\"card-password\"\n            />\n          );\n        })}\n        <Icon.Dot size=\"7px\" color=\"#04C09E\" style={{ margin: '18px' }} />\n        <Icon.Dot size=\"7px\" color=\"#04C09E\" style={{ margin: '18px' }} />\n      </div>\n    </div>\n  );\n}\n","import { Dot, LeftArrow, QuestionMark } from './assets';\n\nconst Icon = { Dot, LeftArrow, QuestionMark };\n\nexport default Icon;\n","import React from 'react';\n\nexport default function LeftArrow({ size = '16px', color = '#616161', style }) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 8.3 15.8\"\n      width={size}\n      height={size}\n      fill={color}\n      style={style}\n    >\n      <title>Icon/leftArrow</title>\n      <g id=\"leftArrow\">\n        <path\n          d=\"M7.9,15.8c-0.1,0-0.2,0-0.3-0.1L0.1,8.2C0,8,0,7.8,0.1,7.6l7.5-7.5C7.8,0,8,0,8.2,0.1s0.2,0.4,0,0.6L1.1,7.8\n\tC1,7.9,1,7.9,1.1,8l7.1,7.1c0.2,0.2,0.2,0.4,0,0.6C8.1,15.8,8,15.8,7.9,15.8z\"\n        />\n      </g>\n    </svg>\n  );\n}\n","import React from 'react';\n\nexport default function QuestionMark({ size = '16px', color = '#616161', style }) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 16 16\"\n      width={size}\n      height={size}\n      fill={color}\n      style={style}\n    >\n      <title>Icon/questionMarks</title>\n      <g id=\"questionMark\">\n        <path d=\"M8,.8A7.2,7.2,0,1,1,.8,8,7.21,7.21,0,0,1,8,.8M8,0a8,8,0,1,0,8,8A8,8,0,0,0,8,0Z\" />\n        <path d=\"M5.51,4.69A2.08,2.08,0,0,1,6.63,3.48a2.92,2.92,0,0,1,3.21.37,2.6,2.6,0,0,1,.28,3.37,0,0,0,0,0,0,0,12.54,12.54,0,0,1-1,1,1.82,1.82,0,0,0-.4,1.19c-.05.44-.18.82-.69.81-.66,0-.63-.91-.56-1.38a3.14,3.14,0,0,1,.73-1.51c.41-.47.88-.78,1-1.45a1.2,1.2,0,0,0-1-1.33c-.58,0-1.38.37-1.35,1,0,.39.29.78-.06,1.1-.56.55-1.21-.14-1.29-.71A2.73,2.73,0,0,1,5.51,4.69Zm3.12,7.88a.78.78,0,0,1-.59.26.76.76,0,0,1-.58-.26A1,1,0,0,1,7.21,12a.89.89,0,0,1,.25-.63A.77.77,0,0,1,8,11.05a.79.79,0,0,1,.59.27.85.85,0,0,1,.26.63A.88.88,0,0,1,8.63,12.57Z\" />\n      </g>\n    </svg>\n  );\n}\n","import React from 'react';\nimport './style.css';\n\nexport default function Modal({ onCloseModal, children }) {\n  const onDimmedClick = (event) => {\n    if (event.currentTarget === event.target) {\n      onCloseModal();\n    }\n  };\n\n  return (\n    <div className=\"modal\" role=\"dialog\" aria-modal=\"true\" onClick={onDimmedClick}>\n      <div className=\"modal-inner\">{children}</div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Icon } from '../';\nimport './style.css';\n\nexport default function Header({ title }) {\n  return (\n    <div className=\"header\">\n      <Icon.LeftArrow size=\"16px\" color=\"#525252\" />\n      <h1 className=\"header__title\">{title}</h1>\n    </div>\n  );\n}\n","export const cardSerialNumberFormatter = (serialNumber) => {\n  if (serialNumber.length > 16) throw Error('올바르지 않은 카드 번호입니다.');\n\n  const maskedSerialNumber =\n    serialNumber.slice(0, 8) + '●'.repeat(serialNumber.length > 8 ? serialNumber.length - 8 : 0);\n  return maskedSerialNumber.match(/.{1,4}/g)?.join('-') || maskedSerialNumber;\n};\n\nexport const MMYYDateFormatter = (date) => {\n  if (date.length > 4) throw Error('올바르지 않은 날짜 형식입니다.');\n\n  return date.match(/.{1,2}/g)?.join('/') || date;\n};\n","export const isDigitKey = (key) => {\n  return /^\\d{1}$/.test(key);\n};\n\nexport const isValidSerialNumber = (serialNumber) => {\n  return /^([0-9]{16})$/.test(serialNumber);\n};\n\nexport const isValidDateFormat = (date) => {\n  return /^(?:0[1-9]|1[0-2])(\\d{2})$/.test(date);\n};\n\nexport const isValidUserName = (userName) => {\n  return /^([a-zA-Z ]{0,30})$/.test(userName);\n};\n","import React, { useState, useRef, useMemo, useEffect } from 'react';\nimport { CARD, CARD_COMPANY, ERROR_MESSAGE } from '../../constants';\nimport { Icon, Card, Input, Header, TextButton, PasswordInput } from '../../components';\nimport { cardSerialNumberFormatter, MMYYDateFormatter } from '../../utils/formatter';\nimport { isValidSerialNumber, isValidDateFormat, isValidUserName } from './validator';\nimport './style.css';\n\nexport default function AddCardForm({\n  serialNumber,\n  setSerialNumber,\n  cardCompany,\n  setCardCompany,\n  expirationDate,\n  setExpirationDate,\n  userName,\n  setUserName,\n  securityCode,\n  setSecurityCode,\n  password,\n  setPassword,\n  onSetModalContents,\n  setPage,\n}) {\n  const [expirationDateErrorMessage, setExpirationDateErrorMessage] = useState('');\n  const [userNameErrorMessage, setUserNameErrorMessage] = useState('');\n\n  const serialNumberInputElement = useRef(null);\n\n  const isFormCompleted = useMemo(() => {\n    return (\n      isValidSerialNumber(serialNumber) &&\n      cardCompany &&\n      isValidDateFormat(expirationDate) &&\n      securityCode.length === CARD.SECURITY_CODE_LENGTH &&\n      password.first &&\n      password.second\n    );\n  }, [serialNumber, cardCompany, expirationDate, securityCode, password]);\n\n  useEffect(() => {\n    serialNumberInputElement.current.focus();\n  }, [cardCompany]);\n\n  const onSetPassword = (key, value) => {\n    if (isNaN(value)) return;\n\n    setPassword({ ...password, [key]: value });\n  };\n\n  const offsetByInputType = {\n    deleteContentBackward: -1,\n    insertText: 1,\n  };\n\n  const getOffset = (inputType, selectionStart) => {\n    if (inputType === 'insertText') {\n      return selectionStart !== 0 && selectionStart % (CARD.SERIAL_NUMBER_UNIT_LENGTH + 1) === 0\n        ? offsetByInputType[inputType]\n        : 0;\n    }\n\n    if (inputType === 'deleteContentBackward') {\n      return selectionStart !== 0 &&\n        (selectionStart + 1) % (CARD.SERIAL_NUMBER_UNIT_LENGTH + 1) === 0\n        ? offsetByInputType[inputType]\n        : 0;\n    }\n\n    return 0;\n  };\n\n  const getCurrentSerialNumber = {\n    deleteContentBackward: (serialIndex) => {\n      return serialNumber.slice(0, serialIndex - 1) + serialNumber.slice(serialIndex);\n    },\n    insertText: (serialIndex, insertKey) => {\n      return serialNumber.slice(0, serialIndex) + insertKey + serialNumber.slice(serialIndex);\n    },\n  };\n\n  const onSerialNumberInputChange = (event) => {\n    const inputKey = event.nativeEvent.data;\n    const inputValue = event.target.value.replaceAll('-', '');\n\n    if (isNaN(inputKey)) {\n      event.target.value = cardSerialNumberFormatter(serialNumber);\n      return;\n    }\n\n    const inputType = event.nativeEvent.inputType;\n    const selectionStart = event.target.selectionStart;\n    const offset = getOffset(inputType, selectionStart);\n    const currentLocation = selectionStart + offset;\n\n    const serialIndex =\n      currentLocation -\n      Math.floor(currentLocation / (CARD.SERIAL_NUMBER_UNIT_LENGTH + 1)) -\n      offsetByInputType[inputType];\n    const currentSerialNumber = getCurrentSerialNumber[inputType](serialIndex, inputKey);\n\n    setSerialNumber(currentSerialNumber);\n    event.target.value = cardSerialNumberFormatter(currentSerialNumber);\n    event.target.setSelectionRange(currentLocation, currentLocation);\n\n    if (inputValue.length === CARD.SERIAL_ID_CODE_LENGTH) {\n      serialNumberInputElement.current.blur();\n      onSetModalContents('cardSelection');\n    }\n\n    if (cardCompany && inputValue.length < CARD.SERIAL_ID_CODE_LENGTH) {\n      setCardCompany('');\n    }\n  };\n\n  return (\n    <div className=\"add-card-form__container\">\n      <Header title=\"카드추가\" />\n      <form\n        className=\"add-card-form\"\n        onSubmit={(event) => {\n          event.preventDefault();\n\n          if (!isFormCompleted) return;\n\n          setPage('addCardComplete');\n        }}\n      >\n        <div className=\"card-preview\">\n          <Card\n            userName={userName}\n            cardCompanyName={CARD_COMPANY[cardCompany]?.NAME}\n            cardColor={CARD_COMPANY[cardCompany]?.COLOR}\n            cardNumber={serialNumber}\n            expirationDate={MMYYDateFormatter(expirationDate)}\n          />\n        </div>\n\n        <Input\n          type=\"tel\"\n          label=\"카드번호\"\n          inputStyle={{ width: '100%' }}\n          maxLength=\"19\"\n          onChange={onSerialNumberInputChange}\n          onFocus={() => {\n            if (!cardCompany && serialNumber.length === CARD.SERIAL_ID_CODE_LENGTH) {\n              serialNumberInputElement.current.blur();\n              onSetModalContents('cardSelection');\n            }\n          }}\n          innerRef={serialNumberInputElement}\n          inputMode=\"numeric\"\n          textAlign=\"center\"\n        />\n\n        <Input\n          type=\"text\"\n          label=\"만료일\"\n          inputStyle={{ width: '7rem' }}\n          placeholder=\"MM/YY\"\n          textAlign=\"center\"\n          maxLength=\"5\"\n          value={MMYYDateFormatter(expirationDate)}\n          onChange={(event) => {\n            const expirationDate = event.target.value.replace('/', '');\n\n            if (isNaN(expirationDate)) return;\n\n            setExpirationDate(expirationDate);\n\n            if (expirationDate.length === CARD.EXPIRATION_DATE_LENGTH) {\n              if (isValidDateFormat(expirationDate)) {\n                setExpirationDateErrorMessage('');\n                return;\n              }\n\n              setExpirationDateErrorMessage(ERROR_MESSAGE.INVALID_DATE_FORMAT);\n            }\n          }}\n          onClick={() => {\n            setExpirationDate('');\n            expirationDateErrorMessage && setExpirationDateErrorMessage('');\n          }}\n          errorMessage={expirationDateErrorMessage}\n        />\n\n        <Input\n          type=\"text\"\n          inputStyle={{ width: '100%' }}\n          label=\"카드 소유자 이름(선택)\"\n          placeholder=\"카드에 표시된 이름과 동일하게 입력하세요.\"\n          letterCounter={{ current: userName.length, max: CARD.USER_NAME_MAX_LENGTH }}\n          maxLength={CARD.USER_NAME_MAX_LENGTH}\n          value={userName}\n          onChange={(event) => {\n            const name = event.target.value;\n\n            if (!isValidUserName(name)) {\n              setUserNameErrorMessage(ERROR_MESSAGE.INVALID_USER_NAME);\n              return;\n            }\n\n            setUserName(event.target.value.toUpperCase());\n            setUserNameErrorMessage('');\n          }}\n          errorMessage={userNameErrorMessage}\n        />\n\n        <Input\n          type=\"password\"\n          inputStyle={{ width: '5rem' }}\n          label=\"보안코드(CVC/CVV)\"\n          maxLength=\"3\"\n          inputMode=\"numeric\"\n          value={securityCode}\n          onChange={(event) => {\n            const inputValue = event.target.value;\n\n            if (isNaN(inputValue)) return;\n\n            setSecurityCode(inputValue);\n          }}\n          textAlign=\"center\"\n        >\n          <button\n            type=\"button\"\n            className=\"security-code-guide-button\"\n            onClick={() => {\n              onSetModalContents('questionMark');\n            }}\n          >\n            <Icon.QuestionMark size=\"27px\" />\n          </button>\n        </Input>\n\n        <PasswordInput password={password} onSetPassword={onSetPassword}></PasswordInput>\n        {isFormCompleted && (\n          <div className=\"bottom-right-button\">\n            <TextButton text=\"다음\" />\n          </div>\n        )}\n      </form>\n    </div>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { Card, TextButton } from '../../components';\nimport { MMYYDateFormatter } from '../../utils/formatter';\nimport { CARD, CARD_COMPANY } from '../../constants';\nimport './style.css';\nimport '../../index.css';\n\nexport default function AddCardComplete({\n  userName,\n  cardCompany,\n  serialNumber,\n  expirationDate,\n  cardNickName,\n  setCardNickName,\n  setPage,\n}) {\n  return (\n    <div className={'add-card-complete__container'}>\n      <h1 className=\"add-card-complete__title\">카드 등록이 완료되었습니다.</h1>\n      <Card\n        userName={userName}\n        cardCompanyName={CARD_COMPANY[cardCompany].NAME}\n        cardColor={CARD_COMPANY[cardCompany].COLOR}\n        cardNumber={serialNumber}\n        expirationDate={MMYYDateFormatter(expirationDate)}\n        size=\"large\"\n      />\n      <input\n        className=\"add-card-complete__input\"\n        value={cardNickName}\n        onChange={(event) => {\n          setCardNickName(event.target.value);\n        }}\n        maxLength={CARD.NICKNAME_MAX_LENGTH}\n      />\n      <div\n        className=\"bottom-right-button\"\n        onClick={(event) => {\n          event.preventDefault();\n        }}\n      >\n        <TextButton\n          text=\"확인\"\n          onClick={() => {\n            setPage('addCardForm');\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { CardCompanySelection, SecurityCodeGuide } from './components';\nimport { AddCardForm, AddCardComplete } from './pages';\nimport { Modal } from './components';\nimport { CARD_COMPANY } from './constants';\n\nfunction App() {\n  const [page, setPage] = useState('addCardForm');\n\n  const [isModalOpened, setIsModalOpened] = useState(false);\n  const [modalContents, setModalContents] = useState('cardSelection');\n\n  const [serialNumber, setSerialNumber] = useState('');\n  const [cardCompany, setCardCompany] = useState('');\n  const [expirationDate, setExpirationDate] = useState('');\n  const [userName, setUserName] = useState('');\n  const [securityCode, setSecurityCode] = useState('');\n  const [password, setPassword] = useState({ first: '', second: '' });\n  const [cardNickName, setCardNickName] = useState('');\n\n  const onSetModalContents = (name) => {\n    setModalContents(name);\n\n    setIsModalOpened(true);\n  };\n\n  const onSetCardCompany = (name) => {\n    setCardCompany(name);\n    setCardNickName(CARD_COMPANY[name].NAME);\n\n    setIsModalOpened(false);\n  };\n\n  useEffect(() => {\n    if (page === 'addCardForm') {\n      setSerialNumber('');\n      setCardCompany('');\n      setExpirationDate('');\n      setUserName('');\n      setSecurityCode('');\n      setPassword({ first: '', second: '' });\n    }\n  }, [page]);\n\n  return (\n    <>\n      {page === 'addCardForm' && (\n        <AddCardForm\n          serialNumber={serialNumber}\n          setSerialNumber={setSerialNumber}\n          cardCompany={cardCompany}\n          setCardCompany={setCardCompany}\n          expirationDate={expirationDate}\n          setExpirationDate={setExpirationDate}\n          userName={userName}\n          setUserName={setUserName}\n          securityCode={securityCode}\n          setSecurityCode={setSecurityCode}\n          password={password}\n          setPassword={setPassword}\n          onSetModalContents={onSetModalContents}\n          setPage={setPage}\n        />\n      )}\n      {page === 'addCardComplete' && (\n        <AddCardComplete\n          serialNumber={serialNumber}\n          cardCompany={cardCompany}\n          expirationDate={expirationDate}\n          userName={userName}\n          cardNickName={cardNickName}\n          setCardNickName={setCardNickName}\n          setPage={setPage}\n        />\n      )}\n      {isModalOpened && (\n        <Modal onCloseModal={() => setIsModalOpened(false)}>\n          {modalContents === 'cardSelection' && (\n            <CardCompanySelection onSetCardCompany={onSetCardCompany}></CardCompanySelection>\n          )}\n          {modalContents === 'questionMark' && <SecurityCodeGuide />}\n        </Modal>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}